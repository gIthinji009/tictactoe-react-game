{"ast":null,"code":"var _jsxFileName = \"/home/laban/Documents/ReactTicTacToe/src/components/board/Board.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Square from \"../squares/Square\";\n\n//pass in props by giving the info as html attributes \n// the attribute name should match the prop name used in the component the prop has been passed to. \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Board({\n  title,\n  color\n}) {\n  _s();\n  // create a state which will tag the 9 squares as array items thus giving index positions \n  // empty squares will be tagged as null \n  // clicked squares will either be x or o\n\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  // when you need your child to communicate back to the parent we can pass down a function as a prop to the child \n  // use the return of the function to update our state \n\n  // define a state to keep track of the player \n  const [isNext, setIsNext] = useState(true);\n\n  // 1. this function should create a copy of our squares arrays. \n  // how do we create copies of arrays - reassignment , in build methods. \n  //2. this method then utilizes the copy to add the first value i.e. x to the first square \n  // 3. if the value is added we then need to inform react that our component has an update , do this by updating the state value \n  function handleClick(i) {\n    // returning early to stop overwriting \n    // this checks for if a click event has happened.\n    if (squares[i]) {\n      return;\n    }\n    // copy \n    const nextSquare = squares.slice();\n\n    // switching players \n    if (isNext) {\n      //set value according to player\n      nextSquare[i] = \"X\";\n    } else {\n      nextSquare[i] = \"O\";\n    }\n    //update our component by updating the state. \n    setSquares(nextSquare);\n    setIsNext(!isNext); //switching the value \n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      style: {\n        color: color\n      },\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[0],\n        onSquareClick: () => handleClick(0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[1],\n        onSquareClick: () => handleClick(1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[2],\n        onSquareClick: () => handleClick(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[3],\n        onSquareClick: () => handleClick(3)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[4],\n        onSquareClick: () => handleClick(4)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[5],\n        onSquareClick: () => handleClick(5)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[6],\n        onSquareClick: () => handleClick(6)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[7],\n        onSquareClick: () => handleClick(7)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[8],\n        onSquareClick: () => handleClick(8)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true);\n}\n_s(Board, \"qpuhZ2Di1tT00uDUNz4u+YtcmYI=\");\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useState","Square","jsxDEV","_jsxDEV","Fragment","_Fragment","Board","title","color","_s","squares","setSquares","Array","fill","isNext","setIsNext","handleClick","i","nextSquare","slice","children","style","fileName","_jsxFileName","lineNumber","columnNumber","className","value","onSquareClick","_c","$RefreshReg$"],"sources":["/home/laban/Documents/ReactTicTacToe/src/components/board/Board.js"],"sourcesContent":["import { useState } from \"react\"\nimport Square from \"../squares/Square\"\n\n//pass in props by giving the info as html attributes \n// the attribute name should match the prop name used in the component the prop has been passed to. \nexport default function Board ({title, color}) { \n\n    // create a state which will tag the 9 squares as array items thus giving index positions \n    // empty squares will be tagged as null \n    // clicked squares will either be x or o\n\n    const [squares, setSquares] = useState(Array(9).fill(null))\n    // when you need your child to communicate back to the parent we can pass down a function as a prop to the child \n    // use the return of the function to update our state \n\n    // define a state to keep track of the player \n    const [isNext, setIsNext] = useState(true)\n\n\n    // 1. this function should create a copy of our squares arrays. \n    // how do we create copies of arrays - reassignment , in build methods. \n    //2. this method then utilizes the copy to add the first value i.e. x to the first square \n    // 3. if the value is added we then need to inform react that our component has an update , do this by updating the state value \n    function handleClick (i) {\n\n        // returning early to stop overwriting \n        // this checks for if a click event has happened.\n        if (squares[i]){\n             return;\n        }\n        // copy \n        const nextSquare = squares.slice();\n\n        // switching players \n        if(isNext) {\n            //set value according to player\n            nextSquare[i] = \"X\"\n        } else {\n            nextSquare[i] = \"O\"\n        }\n        //update our component by updating the state. \n        setSquares(nextSquare)\n        setIsNext(!isNext)  //switching the value \n\n    }\n\n  \n    return (\n        <>\n        <h4 style={{\n            color : color\n        }}>{title}</h4>\n\n        <div className=\"board-row\">\n           <Square value={squares[0]}  onSquareClick={() => handleClick(0) } />\n           <Square value={squares[1]} onSquareClick={() => handleClick(1) } />\n           <Square value={squares[2]} onSquareClick={() => handleClick(2) } />\n        </div>\n\n       <div className=\"board-row\">\n       <Square value={squares[3]} onSquareClick={() => handleClick(3) } />\n       <Square value={squares[4]} onSquareClick={() => handleClick(4) } />\n       <Square value={squares[5]} onSquareClick={() => handleClick(5) }/>\n       </div>\n\n       <div className=\"board-row\">\n       <Square value={squares[6]} onSquareClick={() => handleClick(6) } />\n       <Square value={squares[7]} onSquareClick={() => handleClick(7) } />\n       <Square value={squares[8]} onSquareClick={() => handleClick(8) } />\n\n        </div>\n        </>\n   \n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}